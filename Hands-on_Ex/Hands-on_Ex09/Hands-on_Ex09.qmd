---
title: "Hands-on Exercise 9: Geographically Weighted Predictive Models"
---

Installing packages and Loading packages that will be used for this Exercise

-   rsample: Is being used to split data set into training and test data set

```{r}
pacman::p_load(sf, spdep, GWmodel, SpatialML, 
               tmap, rsample, Metrics, tidyverse)
```

Reading data file to rds

```{r}
mdata <- read_rds('data/aspatial/mdata.rds')
```

Performing data sampling

-   The entire data are split into training and test data sets with 65% ad 35% respectively by using initial_split() function from rsample package

```{r}
set.seed(1234)
resale_split <- initial_split(mdata, 
                              prop = 6.5/10,)
train_data <- training(resale_split)
test_data <- testing(resale_split)

```

Saving test and training set

```{r}
write_rds(train_data, "data/aspatial/train_data.rds")
write_rds(test_data, "data/aspatial/test_data.rds")
```

Computing correlation matrix

-   This is done to ensure that there is no multicolinearity problem

```{r}
mdata_nogeo <- mdata %>%
  st_drop_geometry()
corrplot::corrplot(cor(mdata_nogeo[, 2:17]), 
                   diag = FALSE, 
                   order = "AOE",
                   tl.pos = "td", 
                   tl.cex = 0.5, 
                   method = "number", 
                   type = "upper")
```

-   Reveals that all correlation values are below 0.8. Hence, there is no sign of multicolinearity

Building a non-spatial multiple linear regression

```{r}
price_mlr <- lm(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data=train_data)
summary(price_mlr)
```

Saving multiple linear regression model

```{r}
write_rds(price_mlr, "data/aspatial/price_mlr.rds" ) 
```

Converting the sf data frame to SpatialPointDataFrame

-   this is needed as the function requires input to be in SpatialPointDataFrame format

```{r}
train_data_sp <- as_Spatial(train_data)
train_data_sp
```

Obtaining optimal adaptive bandwidth

```{r}
bw_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                  data=train_data_sp,
                  approach="CV",
                  kernel="gaussian",
                  adaptive=TRUE,
                  longlat=FALSE)
```

-   Reveals that 40 neighbour points are the optimal bandwidth for adaptive bandwidth

Saving optimal bandwidth for adaptive bandwidth

```{r}
write_rds(bw_adaptive, "data/aspatial/bw_adaptive.rds")
```

Converting test data to SpatialPointDataFrame

```{r}
test_data_sp <- test_data %>%
  as_Spatial()
test_data_sp
```

Computing adaptive bandwidth for the test data

```{r}
gwr_bw_test_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                  data=test_data_sp,
                  approach="CV",
                  kernel="gaussian",
                  adaptive=TRUE,
                  longlat=FALSE)
```

Computing predicted values of the test data

Extracting coordinates data

```{r}
coords <- st_coordinates(mdata)
coords_train <- st_coordinates(train_data)
coords_test <- st_coordinates(test_data)
```

Dropping geometry field column

```{r}
train_data <- train_data %>% 
  st_drop_geometry()
```

Calibrating Random Forest Model

```{r}
set.seed(1234)
rf <- ranger(resale_price ~ floor_area_sqm + storey_order + 
               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + 
               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + 
               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + 
               WITHIN_1KM_PRISCH,
             data=train_data)
rf
```

Saving random forest model for future use

```{r}
write_rds(rf, "data/aspatial/rf.rds")
```

Calibrating Geographical Random Forest model

```{r}
set.seed(1234)
gwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +
                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +
                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                       WITHIN_1KM_PRISCH,
                     dframe=train_data, 
                     bw=55,
                     kernel="adaptive",
                     coords=coords_train)
```

Saving the model for future use

```{r}
write_rds(gwRF_adaptive, "data/aspatial/gwRF_adaptive.rds")
```

Preparing test data

-   This is used to combine test data with corresponding coordinates data

```{r}
test_data <- cbind(test_data, coords_test) |>
  st_drop_geometry()
```

```{r}
gwRF_pred <- predict.grf(gwRF_adaptive, 
                           test_data, 
                           x.var.name="X",
                           y.var.name="Y", 
                           local.w=1,
                           global.w=0)
```

Predicting with test data

-   predict.grf() function from spatialML package is used to predict geospatial weighted random forest model

Saving output

```{r}
GRF_pred <- write_rds(gwRF_pred, "data/aspatial/GRF_pred.rds")
```

Converting output into a data frame for further visualisation and analysis

```{r}
GRF_pred_df <- as.data.frame(GRF_pred)
```

Appending predicted values to the test_data

```{r}
test_data_p <- cbind(test_data, GRF_pred_df)
```

Calculating Root Mean Square Error

```{r}
rmse(test_data_p$resale_price, 
     test_data_p$GRF_pred)
```

Visualising the predicted values

```{r}
ggplot(data = test_data_p,
       aes(x = GRF_pred,
           y = resale_price)) +
  geom_point()
```
