---

title: "Hands-on Exercise 01: Geospatial Data Science with R"

---

## Loading packages that will be used for this exercise 
1. sf: It is for importing, managing, and processing geospatial data
2. Tidyverse: It is for performing data science tasks such as importing, wrangling and visualising data
Tidyverse consist of a family of R packages that includes: 
- readr: for importing csv data
- readxl: for importing excel worksheets
- tidyr: for manipulating data
- dplyr: for data wrangling 
- ggplot2: for visualising data

```{r}
pacman::p_load(sf, tidyverse)
```
alternatively, library() can be used to load a single package.

## Importing polygon feature data in shapefile format

MP14_SUBZONE_WEB_PL is a shapefile and st_read() function of the sf package can be used to import it as a polygon feature dataframe

There are two arguments that are needed for shapefile format: 

1. dsn = define the file directory of the data path

2. layer = provide the name of the shapefile. Do not need to include the extension.

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```
- Reveals that the geospatial objects are multipolygon features
- There are a total of 323 multipolygon features and 15 fields in mpsz
- It is in svy21 projected coordinate system

## Importing polyline feature data in shapefile format

```{r}
cyclingpath = st_read(dsn = "data/geospatial", 
                         layer = "CyclingPathGazette")
```
- Reveals that the geospatial objects are in Multilinestring features
- There are a total of 2558 multilinestring features with 2 fields
- It is in svy21 projected coordinate system

## Importing other vector GIS formats such as in kml format

Using the same st_read function from sf package but the complete path and kml file extension needs to be provided

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

- Reveals that preschool is a point feature dataframe
- There are a total of 2290 point features with 2 fields
- The coordinate system for preschool is in wgs84

## Checking the content of a simple feature dataframe

We can retrieve the geometry list-column using

1. mpsz\$geometry: retrieved using the name of the field/variable

2. mpsz[[16]]: retrieved using the index number of the field

3. st_geometry(mpsz): st_geometry() function directly pulls out the information from the simple feature dataframe

```{r}
mpsz$geometry
mpsz[[16]]
st_geometry(mpsz)
```

- Provides basic information of the feature class such as geometry, the geographic extent of the features and the coordinate system of the data

## Learning more about the associated attribute information in the dataframe

```{r}
glimpse(mpsz)
```

- glimpse() function in dplyr reveals the data type of each field.

## To reveal complete information of a feature object n = number of records to show

```{r}
head(mpsz, n = 5)
```

## Plotting of Geospatial data plot(): function of R Graphic for visualising geospatial feature

```{r}
plot(mpsz)
```

- The default plot of an sf object is a multi-plot of all attributes up to a reasonable maximum.

## Plotting of only the geometry field

```{r}
plot(st_geometry(mpsz))
plot(mpsz$geometry)
plot(mpsz[[16]])
```

## Plotting of specific attribute of an sf object

```{r}
plot(mpsz["PLN_AREA_N"])
```

## Obtaining coordinate system of a simple feature dataframe

```{r}
st_crs(mpsz)
```

- mpsz is projected in svy21
- EPSG is 9001
- EPSG code for svy21 should be 3414

## Assigning EPSG code to a simple feature dataframe

1. used when projected system and EPSG code does not match

2. This does not re-project the data

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Checking EPSG code again

```{r}
st_crs(mpsz3414)
```

## Transforming projection

-  st_transform(): This is used to re-project a feature object from one coordinate system to another mathematically

-  This is done to ensure that both geospatial data are projected using similar coordinate system

-  Also used to transform original data from geographic coordinate system to projected coordinate system as GCS is not appropriate for distance and area analysis

```{r}
preschool3414 <- st_transform(preschool, crs = 3414)
```

- In practice, we need to find out the appropriate project coordinate system to use for the analysis before performing the projection transformation

Checking the coordinate system of preschool after transformation

```{r}
st_geometry(preschool3414)
```

## Importing aspatial data

Aspatial data: geospatial data is not among the fields.

- Instead, there are two fields that capture the x and y coordinates for the data points. Such as csv format

- We can use read_csv from the readr package The complete file directory and extension must be included

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

## Examining the datafile

```{r}
list(listings)
```

## Creating a simple feature dataframe from an aspatial dataframe and transformation of coordinate system 
1. coords argument: requires you to provide the column and of the x-coordinates and then the column name of the y-coordinates

2. crs argument: requires you to provide the coordinate system in EPSG code format. (EPSG 4326 is wgs84 Geogpraphic Coordinate System)

```{r}
listings_sf <- st_as_sf(listings, coords = c("longitude", "latitude"), crs=4326) |> st_transform(crs = 3414)
```

Examining the content of the newly created simple feature data frame

```{r}
glimpse(listings_sf)
```

- A new column called geometry has been added into the dataframe
- Longitude and latitude column has been removed as well

## Performing buffering

- st_buffer(): used to compute the 5-meter buffers around cycling paths

- st_area(): used to calculate the area of the buffers

- sum(): used to derive the total land involve in the buffer

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs = 30)
buffer_cycling$AREA <- st_area(buffer_cycling) #New attribute of area is added
sum(buffer_cycling$AREA)
```

Performing Point-in-polygon count

- st_intersects(): compares two sf data objects where they touch or overlap

- lengths(): calculate numbers of pre-schools that fall inside each planning subzone

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414)) #Adds a new attribute PreSch Count 
```

Check the summary statistic of the newly derived PreSch Count field

```{r}
summary(mpsz3414$`PreSch Count`)
```

Obtaining the planning subzone with the most number of pre-schools

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

Can control number of top results to show in the second argument

Calculating density of pre-school by planning subzone

1. st_area(): calculates area of each planning subzone

2. mutate(): used to compute the density of pre-school

```{r}
mpsz3414$Area <- mpsz3414 |> st_area()
mpsz3414 <- mpsz3414 |> mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
mpsz3414$`PreSch Density`
```

## Plotting histogram to reveal distributnio of PreSch Density

```{r}
hist(mpsz3414$`PreSch Density`)
```

- Very basic histogram
## Using ggplot2 to plot publication quality histogram

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

## Plotting of scatterplot showing relationship between Pre-school Density and Pre-school count

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
