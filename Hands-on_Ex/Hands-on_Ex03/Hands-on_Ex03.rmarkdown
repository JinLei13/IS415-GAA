Loading libraries that are needed for this exercise


```{r}
pacman::p_load(sp,sf, raster, spatstat, tmap)
```


importing data that are needed for this analysis


```{r}
childcare_sf <- st_read("/Users/chuangjinlei/Desktop/JinLei13/IS415-GAA/Hands-on_Ex/Hands-on_Ex03/data/geospatial/ChildCareServices.geojson") |>
  st_transform(crs = 3414)
sg_sf <- st_read(dsn = "/Users/chuangjinlei/Desktop/JinLei13/IS415-GAA/Hands-on_Ex/Hands-on_Ex03/data/geospatial", layer="CostalOutline")
mpsz_sf <- st_read(dsn = "/Users/chuangjinlei/Desktop/JinLei13/IS415-GAA/Hands-on_Ex/Hands-on_Ex03/data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")

```


Mapping of geospatial data sets


```{r}
tmap_mode("plot")
tm_shape(mpsz_sf) +
  tm_polygons() +
  tm_shape(childcare_sf) +  
  tm_dots()
```


Pin map of datasets

-   'view' option allows us to create an interactive map


```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()
```


converting sf dataframe to sp's spatial\*class and displaying information of dataframes

-   can be done using as_spatial() function


```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
childcare
mpsz
sg
```


Converting the sp's Spatial\* class into generic sp format


```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
childcare_sp
sg_sp
```


converting the generic sp format into spatstat's ppp format and plotting the data


```{r}
library(dplyr)
childcare_ppp <- select(childcare_sf, geometry) |> as.ppp()
childcare_ppp
tmap_mode('plot')
plot(childcare_ppp)
summary(childcare_ppp)
```


Checking for duplication


```{r}
any(duplicated(childcare_ppp))
```


Result from the earlier analysis showed that there are duplication. Hence, we can use multiplicity () and sum() function to count how many locations have more than one point event


```{r}
sum(multiplicity(childcare_ppp))
```


Viewing locations of these duplicated point events


```{r}
tmap_mode('view')
tm_shape(childcare) +
  tm_dots(alpha=0.4, 
          size=0.05)
```


Jittering approach which adds a small perturbation to the duplicated points so that they do not occupy the exact same space.


```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```


Checking for duplicated points again after performing jittering


```{r}
any(duplicated(childcare_ppp_jit))
```


Creating an owin object and plotting it


```{r}
sg_owin <- as.owin(sg_sf)
plot(sg_owin)
summary(sg_owin)
```


Combining both point events object and owin object that have been create and plotting the result


```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
summary(childcareSG_ppp)
tmap_mode('plot')
plot(childcareSG_ppp)
```


Computing kernel density estimation using automatic bandwidth selection method and plotting the result


```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
plot(kde_childcareSG_bw)
```


Retrieving the bandwidth used to compute the kde layer


```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```


Rescaling the original unit of measurement from meters to kilometers


```{r}
childcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, "km")
```


Re-running kernel density estimation after changing unit of measurement


```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw)
```


Working with other bandwidth selection methods and the options are:

1.  bw.CvL()
2.  bw.scott()
3.  bw.ppl()
4.  bw.diggle()


```{r}
 bw.CvL(childcareSG_ppp.km)
bw.scott(childcareSG_ppp.km)
bw.ppl(childcareSG_ppp.km)
bw.diggle(childcareSG_ppp.km)
```


Comparing output of using different bandwidth selection method


```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```


Working with different kernel estimation methods

default: gaussian

1.  Epanechnikov
2.  Quartic
3.  Dics


```{r}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```


Computing Kernel density estimation by using fixed bandwidth


```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```


Computing Kernel Density Estimation by using adaptive bandwidth


```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```


Plotting and comparing the output of using fixed and adaptive Kernel Density Estimation method


```{r}
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```


Converting Kernel Density estimation into grid object for mapping purposes


```{r}
gridded_kde_childcareSG_bw <- as(kde_childcareSG.bw, "SpatialGridDataFrame")
spplot(gridded_kde_childcareSG_bw)
```


Converting gridded output into raster


```{r}
kde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)
kde_childcareSG_bw_raster
```


Assigning projection system as NA was showed earlier on


```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```


Visualising the output in tmap


```{r}
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("v") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```


Extracting different study areas and plotting the target planning areas


```{r}
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
tm = mpsz[mpsz@data$PLN_AREA_N == "TAMPINES",]
ck = mpsz[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",]
jw = mpsz[mpsz@data$PLN_AREA_N == "JURONG WEST",]
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```


Converting the spatial dataframe into generic sp format


```{r}
pg_sp = as(pg, "SpatialPolygons")
tm_sp = as(tm, "SpatialPolygons")
ck_sp = as(ck, "SpatialPolygons")
jw_sp = as(jw, "SpatialPolygons")
```


Creating an owin object


```{r}
pg_owin = as.owin(mpsz_sf[mpsz@data$PLN_AREA_N == "PUNGGOL",])
tm_owin = as.owin(mpsz_sf[mpsz@data$PLN_AREA_N == "TAMPINES",])
ck_owin = as.owin(mpsz_sf[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",])
jw_owin = as.owin(mpsz_sf[mpsz@data$PLN_AREA_N == "JURONG WEST",])
```


Combining childcare points and the study area


```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```


Changing unit of measurement from meters to kilometers


```{r}
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
```


Plotting the four study areas and the location of childcares


```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```


Computing Kernel Density Estimation of the four study areas


```{r}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tempines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
```


Computing fixed bandwidth Kernel Density Estimation of the study areas


```{r}
par(mfrow=c(2,2))
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Chou Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```


Testing spatial point patterns using Clark and Evans Test

-   P-value is 0.01 \< 0.05. Hence, we can reject the null hypothesis and infer that the distribution of childcare services are not randomly distributed


```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```


Conducting Clark and Evans Test on Choa Chu Kang planning area

-   P-value is 0.024 \< 0.05. Hence, we can reject the null hypothesis and infer that the distribution of childcare services in Choa Chu Kang are not randomly distributed


```{r}
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```


Conducting Clark and Evans Test on Tampines planning area

-   P-value is 0.002 \< 0.05. Hence, we can reject the null hypothesis and infer that the distribution of childcare services in Tampines are not randomly distributed


```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```


Computing G-function estimation for Choa Chu Kang Planning area


```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```


Performing Complete Spatial Randomness Test for hypothesis testing


```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```


Computing G-function estimation for Tampines planning area


```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```


Performing Complete Spatial Randomness Test for hypothesis in Tampines planning area


```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r}
plot(G_tm.csr)
```


Computing F-function estimation for Choa Chu Kang planning area


```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```


Performing Complete Spatial Randomness test for hypothesis testing in Choa Chu Kang Planning area


```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r}
plot(F_CK.csr)
```


Computing F-function estimation for Tampines planning area


```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```


Performing Complete Spatial Randomness test for hypothesis testing in Tampines planning area


```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
```

```{r}
plot(F_tm.csr)
```


Computing K-function estimation for Choa Chu Kang Planning area


```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```


Performing Complete Spatial Randomness Test for hypothesis testing in Choa Chu Kang planning area


```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```


Computing K-function estimation for Tampines planning area


```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```


Performing Complete Spatial Randomness Test for hypothesis testing for Tampines planning area


```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```


Computing L-function estimation for Choa Chu Kang planning area


```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```


Performing Complete Spatial Randomness Test for hypothesis testing for Choa Chu Kang planning area


```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```


Computing L-function estimation for Tampines planning area


```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```


Performing Complete Spatial Randomness Test for hypothesis testing in Tampines planning area


```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```

