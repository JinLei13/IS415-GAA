---
title: "Hands-on Exercise 05: Global Measure of Spatial Autocorrelation"
---

# Loading packages that will be used for this exercise

New packages that will be used for this exercise:

1.  spdep: It will be used to compute Global Spatial Autocorrelation (GSA) statistic.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

# Importing data into the R environment

## Importing shapefile into R environment

```{r}
hunan <- st_read(dsn = "data/geospatial", layer = "Hunan")
```

## Importing csv file into R environment

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

# Performing relational join

```{r}
hunan <- left_join(hunan, hunan2012) |> 
  select(1:4, 7, 15)
```

# Visualising Regional Development Indicator

Will be done using two different classification methods: equal and quantile.

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

# Computing Global Meausures of Spatial Autocorrelation

## Computing Contiguity Spatial Weights

I will need to construct a spatial weights of the study area before computing global spatial autocorrelation statistic. The queen method is used to compute contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, 
                queen=TRUE)
summary(wm_q)
```

## Row-standardised weights matrix

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

## Performing Moran's I statistical test

```{r}
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

-   Can reject the null hypothesis

## Computing Monte Carlo Moran's I

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

## Visualising Monte Carlo Moran's I

## Examining summary statistics of Moran's I test statistics

```{r}
mean(bperm$res[1:999])
var(bperm$res[1:999])
summary(bperm$res[1:999])
```

## Plotting the distribution of Monte Carlo Moran's I statistic using a histogram

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

## Computing Geary's C test for spatial autocorrelation

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

## Computing Monte Carlo Geary's C

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

## Visualising the Monte Carlo Geary's C

Obtaining summary statistics of Geary's C statistic

```{r}
mean(bperm$res[1:999])
var(bperm$res[1:999])
summary(bperm$res[1:999])
```

Plotting histogram to observe the distribution of Geary's C statistic

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

# Spatial Correlogram

Spatial correlograms are a great wat to examine patterns of spatial autocorrelation in the data or model residuals.

## Computing Moran's I correlogram and plotting the output

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

Printing out the full analysis report

```{r}
print(MI_corr)
```

## Computing Geary's C correlogram and plotting the output

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

Printing out the full analysis report

```{r}
print(GC_corr)
```

# Computing Local Measure of Spatial Autocorrelation

## Computing local Moran's I statistics

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

-   Ii: refers to the local Moran's statistics

-   E.Ii: refers to the expectation of local moran statistic under the randomisation hypothesis

-   Var.Ii: refers to the variance of local moran statistic under the randomisation hypothesis

-   Z.Ii: refers to the standard deviation of local moran statistic

-   Pr(): refers to the p-value of local moran statistic

Printing the content of the local moran matrix

```{r}
printCoefmat(data.frame(
  localMI[fips,], 
  row.names=hunan$County[fips]),
  check.names=FALSE)
```

# Creating a map of the local Moran's I statistic

## Appeding the local moran's I datafram onto the hunan SpatialPolygonDataframe

```{r}
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

## Creating a choropleth map of local Moran's I values

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

## Creating a choropleth map of local moran's I p-values

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

## Creating multi-choropleth maps of local Moran's I values and p-values

```{r}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

## Creating a LISA Cluster map

A LISA cluster map shows the significant locations color coded by type of spatial autocorrelation.

### First step to create a LISA cluster map is by creating a scatterplot

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

### Plotting Moran scatterplot with standardised variable

-   Standardising is done using the scale() function which substracts the mean from the variable and divides the variable by their standard deviation

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% 
  as.vector 
```

Plotting scatterplot after standardisation

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% 
  as.vector 
```

```{r}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

### Preparing LISA map classes

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

Deriving the spatially lagged variable of interest and centering the spatially lagged variable around its mean

```{r}
hunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     
```

Centering the local Moran's around the mean

```{r}
LM_I <- localMI[,1] - mean(localMI[,1])    
```

Setting statistical significance level for the local Moran

```{r}
signif <- 0.05       
```

Defining the 4 categories

```{r}
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4      

```

Placing non-significant Moran in the category 0

```{r}
quadrant[localMI[,5]>signif] <- 0
```

Plotting the LISA cluster map

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

### Plotting both local Moran's I values map and its corresponding p-values map next to each other

```{r}
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, 
             asp=1, ncol=2)
```

## Hot spot and cold spot area analysis

-   hotpot: used to describe a region or value that is higher relative to its surroundings

### Computing getis and Ord's G-Statistics

First step is to derive spatial weight matrix

obtaining longitude values

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

obtaining latitude values

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Combine the longitude and latitude values

```{r}
coords <- cbind(longitude, latitude)
```

### Determining the cut-off distance

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

### Computing fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

converting the nb object into spatial weight matrix

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

### Computing adaptive distance weight matrix

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

Converting nb object into spatial weight object

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

### Computing Gi statistic using fixed distance

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

Appeding Gi values to their corresponding hunan sf dataframe

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

### Mapping Gi values with fixed distance weights

```{r}
gdppc <- qtm(hunan, "GDPPC")

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

### Computing Gi statistic using adaptive distance

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

### Mapping Gi values with adaptive distance weights

```{r}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```
